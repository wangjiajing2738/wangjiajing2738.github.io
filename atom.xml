<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://wangjiajing.top</id>
    <title>Pandora  个人博客 </title>
    <updated>2020-03-19T14:49:27.003Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://wangjiajing.top"/>
    <link rel="self" href="https://wangjiajing.top/atom.xml"/>
    <subtitle>个人博客</subtitle>
    <logo>https://wangjiajing.top/images/avatar.png</logo>
    <icon>https://wangjiajing.top/favicon.ico</icon>
    <rights>All rights reserved 2020, Pandora  个人博客 </rights>
    <entry>
        <title type="html"><![CDATA[浮动元素引起的问题和解决方法]]></title>
        <id>https://wangjiajing.top/post/html-yu-xhtml-er-zhe-you-shi-me-qu-bie</id>
        <link href="https://wangjiajing.top/post/html-yu-xhtml-er-zhe-you-shi-me-qu-bie">
        </link>
        <updated>2020-03-18T11:14:00.000Z</updated>
        <content type="html"><![CDATA[<h3>浮动元素引起的问题</h3>
1.父元素的高度无法被撑开，影响与父元素同级的元素。</br>
2.与浮动同级的非浮动会紧跟其后。</br>
3.若非第一个元素浮动，则该元素之前的元素也需要浮动，否则会影响页面显示的结构。</br>
</br>
解决方法：</br>
使用clear:both;属性来清除元素的浮动可解决2、3问题，对于问题1，添加如下样式，给父元素添加.clearfix:after{content: ".";display: block;height: 0;clear: both;visibility: hidden;} .clearfix{display: inline-block;} /* for IE/Mac *</br>
清除浮动的几种方法：
</br>
</br>
<div style="background-color:#FAFAFA">
1，额外标签法<xmp style="display:inline-table;"><div style="clear:both;"></div></xmp>（缺点：不过这个办法会增加额外的标签使HTML结构看起来不够简洁。）</br>
2，使用after伪类
<p>#parent:after{<br>
content:&quot;.&quot;;<br>
height:0;<br>
visibility:hidden;<br>
display:block;<br>
clear:both;<br>
}</p>
<p>3,浮动外部元素<br>
4,设置<code>overflow</code>为<code>hidden</code>或者<code>auto</code></p>
</div>
<h2>end!</h2>
<p><img src="https://wangjiajing.top/post-images/1584544938864.jpg" alt=""></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[LocalStorage与Cookie的异同]]></title>
        <id>https://wangjiajing.top/post/localstorage-yu-cookie-de-yi-tong</id>
        <link href="https://wangjiajing.top/post/localstorage-yu-cookie-de-yi-tong">
        </link>
        <updated>2020-03-17T05:19:13.000Z</updated>
        <content type="html"><![CDATA[<style>
.div1{
	color:#339900;
	font-weight:700 ;
	margin-bottom:15px;
	}
	   table{
            border-collapse:collapse;
            text-align: center;
        }
        td{
            border: 1px solid;
        }
        tr:nth-of-type(odd){
            background-color: #f7f7f7;
        }
</style>
<p><strong>本地存储(Web Storage/localStorage)与会话存储(Cookie)</strong></p>
<div class="div1">相同之处：</div>
<p>1.二者都可能会被禁用；</p>
<p>2.存储的数据量都有最大限制:</p>
<p>3.Cookie内存为4kb；</p>
<p>4.Web Storage是5MB或者更少一些；</p>
<p>5.用户随时可以删除或创建/修改存储目录中的内容；</p>
<p>6.浏览器也可能会自动让存储目录中的内容&quot;过期&quot;；</p>
<p>7.空间配额是以域名为单位分配的，而且由所有子域共享(也就是site1.example.com、site2.example.com、site3.example.com共享同一个目录)；</p>
<p>8.最好都不要用来保存重要的内容；</p>
<div class="div1">存在差别:</div>
<p>1.通过Web Storage API保存的数据只能在客户端查询，不能被服务器端查询；</p>
<p>2.存储的内容不会随着每个请求“来来回回”传递；</p>
<p>3.除了sessionStorage（它会在会话结束时删除自己保存的数据）以外，不能明确指定数据的过期时间；</p>
<div class="div1">Web Strorage:</div>
<p>1.缓存对象以提升用户下次打开应用时的加载速度、保存正在撰写的文件草稿，甚至还可以把它当成虚拟的内存容器来使用；</p>
<p>2.它以键值对数组的形式保存数据，所有数据都一字符串形式存储；</p>
<p>3.localStorage与sessionStorage之间的区别是前者永久保存数据(或保存到用户或浏览器处理它们)，而后者只会在“会话”期间保存数据（关闭标签页或窗口后就没有了）；</p>
<p>4.假如存储的数据量超过了5MB，那浏览器就会抛出QUOTA_EXCEENED_ERR的异常。</p>
<p>为此，一定别忘了把localStorage或sessionStorage封装在一个try-catch块中，就像其它处理异常的代码一样；</p>
<table border="1" width="100%" >
    <tr>
        <td>特性</td>
        <td>Cookie</td>
        <td>LocalStorage</td>
        <td>
            sessionStorage
        </td>
    </tr>
    <tr>
        <td>数据的声明周期</td>
        <td>一般由服务器生成，可设置失效时间。如果在浏览器生成，默认是关闭浏览器之后失效</td>
        <td>除非被清楚，否则永久保存</td>
        <td>
            仅在当前会话有效，关闭页面或浏览器后被清除
        </td>
    </tr>
    <tr>
        <td>存放数据大小</td>
        <td>4KB</td>
        <td>5KB</td>
        <td>5KB</td>
    </tr>
    <tr>
        <td>与服务端通信</td>
        <td>每次都会携带在HTTP头中，如果使用 cookie 保存过多数据会带来性能问题</td>
        <td>仅在客户端中保存，不参与和服务器的通信</td>
        <td>同 LocalStorage</td>
    </tr>
    <tr>
        <td>用途</td>
        <td>一般由服务器端生成，用于标识用户身份</td>
        <td>用于浏览器端缓存数据</td>
        <td>同 LocalStorage</td>
    </tr>
</table>
<p><img src="https://wangjiajing.top/post-images/1584429675864.jpg" alt=""></p>
<h2>end!</h2>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[三种很棒的CSS技巧，替代JavaScript]]></title>
        <id>https://wangjiajing.top/post/san-chong-hen-bang-de-css-ji-qiao-ti-dai-javascript</id>
        <link href="https://wangjiajing.top/post/san-chong-hen-bang-de-css-ji-qiao-ti-dai-javascript">
        </link>
        <updated>2020-03-15T12:17:14.000Z</updated>
        <content type="html"><![CDATA[<style>
.div1{
	background-color:#282A36;
	color:#D1AC36;
	}
	.div2{
	background-image: linear-gradient(135deg,#43CBFF,#9708cc);
            -webkit-background-clip:text;
            color: transparent;
	font-weight: 700;
	font-size:30px

	}
b{
	color:red;
	}
</style>
<ul>
	  <li><b>:active</b> 伪类与CSS数据上报</li>
		<li>超实用超高频使用的<b>:empty</b 伪类</li>
		<li>用好<b>:only-child</b>伪类</li>
</ul>
<h2>1.:active伪类与CSS数据上报</h2>
如果想要知道两个按钮的点击率，CSS开发者可以自己动手，无需劳烦JavaScript开发者去埋点：
<div class="div1">
.button-1:active::after {</br>
  &nbsp;&nbsp;  content: url(./pixel.gif?action=click&id=button1);</br>
 &nbsp; &nbsp;  display: none;</br>
}</br>
.button-2:active::after {</br>
  &nbsp;&nbsp;  content: url(./pixel.gif?action=click&id=button2);</br>
   &nbsp;&nbsp; display: none;</br>
}
</div>
此时，当点击按钮的时候，相关行为数据就会上报给服务器，这种上报就算把JavaScript禁用掉也无法阻止，方便快捷，特别适合A/B测试。
<h2>2. 超实用超高频使用的:empty 伪类</h2>
:empty 伪类用来匹配空标签元素，例如：
<div class="div1">
	<xmp><div class="cs-empty"></div></xmp>
.cs-empty:empty{</br>
    width: 120px;</br>
    padding: 20px;</br>
    border: 10px dashed;</br>
}
	</div>
	div 元素就会匹配:empty伪类，呈现出虚线框!
	<h2>3. 用好:only-child伪类</h2>
	<B>:only-child</B>是一个很给力的伪类，尤其在处理动态数据的时候，可以省去很多写JavaScript逻辑的成本。</br>
	<B>:only-child</B> 意思是匹配没有任何兄弟元素的元素。例如，下面的 p 元素可以匹配:only-child伪类，因为其前后没有其他兄弟元素:
<div class="div1">
<xmp>	<div class="cs-confirm">
    <!-- 可以匹配:only-child伪类 -->
    <p class="cs-confirm-p">确定删除该内容？</p>
</div></xmp>
</div>
虽然.icon元素后面有删除文字，但由于没有标签嵌套，是匿名文本，因此不影响.icon元素匹配:only-child伪类。</br>
尤其需要使用:only-child伪类的场景是动态场景，也就是某个固定小模块，根据场景的不用，里面可能是一个子元素，也可能是多个子元素，元素个数不同，布局方式也不同，此时就是:only-child伪类大放异彩的时候。例如，某个加载元素（loading）模块里面可能就只有一张加载图片，也可能仅仅就是一段加载描述文字，也可能是加载图片和加载文字同时出现，此时:only-child伪类就非常好用。
HTML示意如下：
<div class="div1"><xmp>
<!-- 1. 只有加载图片 -->
<div class="cs-loading">
    <img src="./loading.png" class="cs-loading-img">
</div>
<!-- 2. 只有加载文字 -->
<div class="cs-loading">
    <p class="cs-loading-p">正在加载中...</p>
</div>
<!-- 3. 加载图片和加载文字同时存在 -->
<div class="cs-loading">
    <img src="./loading.png" class="cs-loading-img">
    <p class="cs-loading-p">正在加载中...</p>
</div></xmp>
</div>
我们无需在父元素上专门指定额外的类名来控制不同状态的样式，直接活用:only-child伪类就可以让各种状态下布局都良好。
<div class="div1">
.cs-loading {</br>
    height: 150px;</br>
    position: relative;</br>
    text-align: center;</br>
    /* 与截图无关，截图示意用 */</br>
    border: 1px dotted;</br>
}</br>
/* 图片和文字同时存在时在中间留点间距 */</br>
.cs-loading-img {</br>
    width: 32px; height: 32px;</br>
    margin-top: 45px;</br>
    vertical-align: bottom;</br>
}</br>
.cs-loading-p {</br>
    margin: .5em 0 0;</br>
    color: gray;</br>
}</br>
/* 只有图片的时候居中绝对定位 */</br>
.cs-loading-img:only-child {</br>
    position: absolute;</br>
    left: 0; right: 0; top: 0; bottom: 0;</br>
    margin: auto;</br>
}</br>
/* 只有文字的时候行号近似垂直居中 */</br>
.cs-loading-p:only-child {</br>
    margin: 0;</br>
    line-height: 150px;</br>
}
</div>
	</br>
<span class="div2">感谢你的阅读!</span>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Word]]></title>
        <id>https://wangjiajing.top/post/hello-gridea</id>
        <link href="https://wangjiajing.top/post/hello-gridea">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <content type="html"><![CDATA[<p><img src="https://wangjiajing.top/post-images/1584254667592.jpeg" alt=""><br>
<strong>这里是我第一个网址</strong><br>
<strong>感谢你的到来！</strong></p>
]]></content>
    </entry>
</feed>